/* Generated by the Nim Compiler v1.6.10 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI469763374 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI469763509 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI973078600 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI973078607 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI469763020 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555126 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554437 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI469763063 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
NTI469763063.base = NTI33554437;
var NNI33555121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555121.node = NNI33555121;
NTI33555121.base = NTI33555120;
var NNI33555126 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555126.node = NNI33555126;
NTI33555126.base = NTI33555125;
var NNI469763020 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554437, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554437, name: "Field1", sons: null}]};
NTI469763020.node = NNI469763020;
var NNI973078607 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI973078600, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI973078607.node = NNI973078607;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
NTI469763509.base = NTI33554437;
var NNI469763374 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554437, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554437, name: "Field1", sons: null}]};
NTI469763374.node = NNI469763374;

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function subInt(a_33556944, b_33556945) {
        var result = a_33556944 - b_33556945;
    checkOverflowInt(result);
    return result;
  

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557189, a_33557190, b_33557191) {
      var Temporary1;

  var result_33557192 = 0;

  BeforeRet: do {
      if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {        Temporary1 = (i_33557189 <= b_33557191);      }    if (Temporary1) {
    result_33557192 = i_33557189;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557192;

}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function chckIndx(i_33557184, a_33557185, b_33557186) {
      var Temporary1;

  var result_33557187 = 0;

  BeforeRet: do {
      if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {        Temporary1 = (i_33557184 <= b_33557186);      }    if (Temporary1) {
    result_33557187 = i_33557184;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557184, a_33557185, b_33557186);
    }
    
  } while (false);

  return result_33557187;

}

function cstrToNimstr(c_33556804) {
      var ln = c_33556804.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556804.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556804.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function eqStrings(a_33556931, b_33556932) {
        if (a_33556931 == b_33556932) return true;
    if (a_33556931 === null && b_33556932.length == 0) return true;
    if (b_33556932 === null && a_33556931.length == 0) return true;
    if ((!a_33556931) || (!b_33556932)) return false;
    var alen = a_33556931.length;
    if (alen != b_33556932.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33556931[i] != b_33556932[i]) return false;
    return true;
  

  
}
    var gradeLetters_469762078 = [makeNimstrLit("A+"), makeNimstrLit("A"), makeNimstrLit("A-"), makeNimstrLit("B+"), makeNimstrLit("B"), makeNimstrLit("B-"), makeNimstrLit("C+"), makeNimstrLit("C"), makeNimstrLit("C-"), makeNimstrLit("D+"), makeNimstrLit("D"), makeNimstrLit("D-"), makeNimstrLit("F")];
var ConstSet2 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet3 = setConstr([97, 122], [65, 90], [48, 57], 95);

function addChar(x_33557255, c_33557256) {
    x_33557255.push(c_33557256);

  
}
var ConstSet4 = setConstr([48, 57]);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr(101, 69);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([48, 57]);

function nimParseBiggestFloat(s_33557273, number_33557274, number_33557274_Idx, start_33557275) {
    var Temporary1;

  var result_33557276 = 0;

  BeforeRet: do {
    var sign_33557277 = false;
    var i_33557278 = start_33557275;
    if ((s_33557273[i_33557278] == 43)) {
    i_33557278 += 1;
    }
    else {
    if ((s_33557273[i_33557278] == 45)) {
    sign_33557277 = true;
    i_33557278 += 1;
    }
    }
    if (((s_33557273[i_33557278] == 78) || (s_33557273[i_33557278] == 110))) {
    if (((s_33557273[(i_33557278 + 1)] == 65) || (s_33557273[(i_33557278 + 1)] == 97))) {
    if (((s_33557273[(i_33557278 + 2)] == 78) || (s_33557273[(i_33557278 + 2)] == 110))) {
    if (!((ConstSet2[s_33557273[(i_33557278 + 3)]] != undefined))) {
    number_33557274[number_33557274_Idx] = NaN;
    result_33557276 = ((i_33557278 + 3) - start_33557275);
    break BeforeRet;
    }
    
    }
    
    }
    
    result_33557276 = 0;
    break BeforeRet;
    }
    
    if (((s_33557273[i_33557278] == 73) || (s_33557273[i_33557278] == 105))) {
    if (((s_33557273[(i_33557278 + 1)] == 78) || (s_33557273[(i_33557278 + 1)] == 110))) {
    if (((s_33557273[(i_33557278 + 2)] == 70) || (s_33557273[(i_33557278 + 2)] == 102))) {
    if (!((ConstSet3[s_33557273[(i_33557278 + 3)]] != undefined))) {
    if (sign_33557277) {
    Temporary1 = -Infinity;
    }
    else {
    Temporary1 = Infinity;
    }
    
    number_33557274[number_33557274_Idx] = Temporary1;
    result_33557276 = ((i_33557278 + 3) - start_33557275);
    break BeforeRet;
    }
    
    }
    
    }
    
    result_33557276 = 0;
    break BeforeRet;
    }
    
    var buf_33557295 = [];
    if (sign_33557277) {
    addChar(buf_33557295, 45);;
    }
    
    Label2: do {
        Label3: while (true) {
        if (!(ConstSet4[s_33557273[i_33557278]] != undefined)) break Label3;
          addChar(buf_33557295, s_33557273[i_33557278]);;
          i_33557278 += 1;
          Label4: do {
              Label5: while (true) {
              if (!(s_33557273[i_33557278] == 95)) break Label5;
                i_33557278 += 1;
              }
          } while (false);
        }
    } while (false);
    if ((s_33557273[i_33557278] == 46)) {
    addChar(buf_33557295, s_33557273[i_33557278]);;
    i_33557278 += 1;
    Label6: do {
        Label7: while (true) {
        if (!(ConstSet5[s_33557273[i_33557278]] != undefined)) break Label7;
          addChar(buf_33557295, s_33557273[i_33557278]);;
          i_33557278 += 1;
          Label8: do {
              Label9: while (true) {
              if (!(s_33557273[i_33557278] == 95)) break Label9;
                i_33557278 += 1;
              }
          } while (false);
        }
    } while (false);
    }
    
    if (((buf_33557295).length == (sign_33557277 ? 1 : 0))) {
    result_33557276 = 0;
    break BeforeRet;
    }
    
    if ((ConstSet6[s_33557273[i_33557278]] != undefined)) {
    addChar(buf_33557295, s_33557273[i_33557278]);;
    i_33557278 += 1;
    if ((s_33557273[i_33557278] == 43)) {
    i_33557278 += 1;
    }
    else {
    if ((s_33557273[i_33557278] == 45)) {
    addChar(buf_33557295, s_33557273[i_33557278]);;
    i_33557278 += 1;
    }
    }
    if (!((ConstSet7[s_33557273[i_33557278]] != undefined))) {
    result_33557276 = 0;
    break BeforeRet;
    }
    
    Label10: do {
        Label11: while (true) {
        if (!(ConstSet8[s_33557273[i_33557278]] != undefined)) break Label11;
          addChar(buf_33557295, s_33557273[i_33557278]);;
          i_33557278 += 1;
          Label12: do {
              Label13: while (true) {
              if (!(s_33557273[i_33557278] == 95)) break Label13;
                i_33557278 += 1;
              }
          } while (false);
        }
    } while (false);
    }
    
    number_33557274[number_33557274_Idx] = parseFloatNative_33557268(buf_33557295);
    result_33557276 = (i_33557278 - start_33557275);
  } while (false);

  return result_33557276;

}

function divInt(a_33556952, b_33556953) {
        if (b_33556953 == 0) raiseDivByZero();
    if (b_33556953 == -1 && a_33556952 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556952 / b_33556953);
  

  
}

function mulInt(a_33556948, b_33556949) {
        var result = a_33556948 * b_33556949;
    checkOverflowInt(result);
    return result;
  

  
}

function modInt(a_33556956, b_33556957) {
        if (b_33556957 == 0) raiseDivByZero();
    if (b_33556957 == -1 && a_33556956 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556956 % b_33556957);
  

  
}
            var gpaRegular_469763459 = {data: [{Field0: 919786464, Field1: makeNimstrLit("B-"), Field2: 2.67}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 1673550086, Field1: makeNimstrLit("D"), Field2: 1.0}, {Field0: -1742008058, Field1: makeNimstrLit("F"), Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: -861508982, Field1: makeNimstrLit("B"), Field2: 3.0}, {Field0: 2060572171, Field1: makeNimstrLit("B+"), Field2: 3.33}, {Field0: -367198581, Field1: makeNimstrLit("C"), Field2: 2.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 1423767502, Field1: makeNimstrLit("A"), Field2: 4.0}, {Field0: 142754382, Field1: makeNimstrLit("A-"), Field2: 3.67}, {Field0: -1437737522, Field1: makeNimstrLit("C+"), Field2: 2.33}, {Field0: -10184399, Field1: makeNimstrLit("A+"), Field2: 4.33}, {Field0: -1818831855, Field1: makeNimstrLit("D+"), Field2: 1.33}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 1598464886, Field1: makeNimstrLit("C-"), Field2: 1.67}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: -586780232, Field1: makeNimstrLit("D-"), Field2: 0.67}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}], counter: 13};
            var gpaWeighted_469763464 = {data: [{Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 1100943450, Field1: makeNimstrLit("Honors"), Field2: 1.0}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: -900547772, Field1: makeNimstrLit("Enriched"), Field2: 0.25}, {Field0: -2044673547, Field1: makeNimstrLit("AP"), Field2: 1.25}, {Field0: 0, Field1: [], Field2: 0.0}, {Field0: 0, Field1: [], Field2: 0.0}], counter: 3};
var ConstSet9 = setConstr(60, 62, 94);
var ConstSet10 = setConstr(60, 62, 94);
var ConstSet11 = setConstr(45, 43, 32);
var ConstSet12 = setConstr([48, 57]);
var ConstSet13 = setConstr([48, 57]);
var ConstSet14 = setConstr([48, 57]);
var ConstSet15 = setConstr([65, 90], [97, 122]);
var ConstSet16 = setConstr(46, 44);

function nimCharToStr(x_33556517) {
  var result_33556518 = [];

    result_33556518 = nimCopy(null, mnewString(1), NTI33554439);
    result_33556518[0] = x_33556517;

  return result_33556518;

}
var ConstSet17 = setConstr([65, 90]);
var ConstSet18 = setConstr([97, 122]);
var ConstSet19 = setConstr([48, 57]);
var ConstSet20 = setConstr([48, 57]);
              var halfYear_469763465 = [makeNimstrLit("Business Law"), makeNimstrLit("Computer Applications"), makeNimstrLit("Entrepreneurship"), makeNimstrLit("Fashion Marketing"), makeNimstrLit("Financial Literacy"), makeNimstrLit("International Business"), makeNimstrLit("Sports & Entertainment Management"), makeNimstrLit("Computer Science"), makeNimstrLit("Java Honors"), makeNimstrLit("Advanced Java Honors"), makeNimstrLit("Web Design"), makeNimstrLit("Creative Writing I"), makeNimstrLit("Creative Writing II Honors"), makeNimstrLit("Film Study"), makeNimstrLit("Forensics I"), makeNimstrLit("Forensics II"), makeNimstrLit("Parcc English"), makeNimstrLit("Ceramics I"), makeNimstrLit("Ceramics II"), makeNimstrLit("Ceramics III"), makeNimstrLit("Crafts I"), makeNimstrLit("Crafts II"), makeNimstrLit("Photography"), makeNimstrLit("Advanced Photography"), makeNimstrLit("Culinary Arts I"), makeNimstrLit("Foods Around the World"), makeNimstrLit("Culinary Arts II"), makeNimstrLit("Child Development I"), makeNimstrLit("Child Development II"), makeNimstrLit("Child Development III"), makeNimstrLit("Interior Design I"), makeNimstrLit("Interior Design II"), makeNimstrLit("Introduction to Technology"), makeNimstrLit("Technology II"), makeNimstrLit("Strategic Design"), makeNimstrLit("Video and Broadcast Production I"), makeNimstrLit("Video and Broadcast Production II"), makeNimstrLit("Broadway Workshop"), makeNimstrLit("Math Lab"), makeNimstrLit("Parcc Mathematics"), makeNimstrLit("Economics"), makeNimstrLit("Economics Honors"), makeNimstrLit("Psychology"), makeNimstrLit("Advanced Psychology"), makeNimstrLit("Sociology")];
              var labs_469763466 = [makeNimstrLit("Biology"), makeNimstrLit("Biology Enriched"), makeNimstrLit("Biology Honors"), makeNimstrLit("Ap Biology"), makeNimstrLit("Principles in Anatomy"), makeNimstrLit("Anatomy & Physiology"), makeNimstrLit("Research in Molecular Biology"), makeNimstrLit("Chemistry"), makeNimstrLit("Chemistry Enriched"), makeNimstrLit("Chemistry Honors"), makeNimstrLit("AP Chemistry"), makeNimstrLit("Physics Enriched"), makeNimstrLit("Physics Honors"), makeNimstrLit("AP Physics C: Mechanics"), makeNimstrLit("AP Physics C: Electricity & Magnetism"), makeNimstrLit("AP Environmental Science"), makeNimstrLit("Science Research Program I"), makeNimstrLit("Science Research Program II"), makeNimstrLit("Science Research Program III")];
              var semester_469763467 = [makeNimstrLit("Forensic Science"), makeNimstrLit("Robotics Engineering")];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_687866018 = [0];

function newSeq_452985301(len_452985303) {
  var result_452985304 = [];

    result_452985304 = new Array(len_452985303); for (var i = 0 ; i < len_452985303 ; ++i) { result_452985304[i] = []; }
  return result_452985304;

}

function newSeq_469763735(len_469763737) {
  var result_469763738 = [];

    result_469763738 = new Array(len_469763737); for (var i = 0 ; i < len_469763737 ; ++i) { result_469763738[i] = 0.0; }
  return result_469763738;

}

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_469765629 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469765629 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_469765629;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_469765629 = addInt(i_469765629, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
    var Temporary1;

    if ((b_33556756 < a_33556755)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556756) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function nsuFindChar(s_939525624, sub_939525625, start_939525626, last_939525627) {
    var Temporary1;

  var result_939525628 = 0;

  BeforeRet: do {
    if ((last_939525627 == 0)) {
    Temporary1 = (s_939525624).length - 1;
    }
    else {
    Temporary1 = last_939525627;
    }
    
    var last_939525629 = Temporary1;
    Label2: do {
      var i_939525639 = 0;
      var colontmp__469765636 = 0;
      colontmp__469765636 = start_939525626;
      var res_469765637 = colontmp__469765636;
      Label3: do {
          Label4: while (true) {
          if (!(res_469765637 <= last_939525629)) break Label4;
            i_939525639 = res_469765637;
            if ((sub_939525625 == s_939525624[chckIndx(i_939525639, 0, (s_939525624).length - 1)])) {
            result_939525628 = i_939525639;
            break BeforeRet;
            }
            
            res_469765637 = addInt(res_469765637, 1);
          }
      } while (false);
    } while (false);
    result_939525628 = -1;
    break BeforeRet;
  } while (false);

  return result_939525628;

}

function nsuFindStrA(a_939525604, s_939525605, sub_939525606, start_939525607, last_939525608) {
    var Temporary1;

  var result_939525609 = 0;

  BeforeRet: do {
    if ((last_939525608 == 0)) {
    Temporary1 = (s_939525605).length - 1;
    }
    else {
    Temporary1 = last_939525608;
    }
    
    var last_939525610 = Temporary1;
    var subLast_939525611 = subInt((sub_939525606).length, 1);
    if ((subLast_939525611 == -1)) {
    result_939525609 = start_939525607;
    break BeforeRet;
    }
    
    var skip_939525612 = start_939525607;
    Label2: do {
        Label3: while (true) {
        if (!(subLast_939525611 <= subInt(last_939525610, skip_939525612))) break Label3;
          var i_939525613 = subLast_939525611;
          Label4: do {
              Label5: while (true) {
              if (!(s_939525605[chckIndx(addInt(skip_939525612, i_939525613), 0, (s_939525605).length - 1)] == sub_939525606[chckIndx(i_939525613, 0, (sub_939525606).length - 1)])) break Label5;
                if ((i_939525613 == 0)) {
                result_939525609 = skip_939525612;
                break BeforeRet;
                }
                
                i_939525613 = subInt(i_939525613, 1);
              }
          } while (false);
          skip_939525612 = addInt(skip_939525612, a_939525604[chckIndx(s_939525605[chckIndx(addInt(skip_939525612, subLast_939525611), 0, (s_939525605).length - 1)], 0, (a_939525604).length - 1)]);
        }
    } while (false);
    result_939525609 = -1;
    break BeforeRet;
  } while (false);

  return result_939525609;

}

function fill_939525563(a_939525565, value_939525566) {
    var xHEX60gensym166_939525572 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(xHEX60gensym166_939525572 <= (a_939525565).length - 1)) break Label2;
          a_939525565[chckIndx(xHEX60gensym166_939525572, 0, (a_939525565).length - 1)] = value_939525566;
          xHEX60gensym166_939525572 = addInt(xHEX60gensym166_939525572, 1);
        }
    } while (false);

  
}

function nsuInitSkipTable(a_939525560, sub_939525561) {
    var m_939525562 = (sub_939525561).length;
    fill_939525563(a_939525560, m_939525562);
    Label1: do {
      var i_939525581 = 0;
      var colontmp__469765642 = 0;
      colontmp__469765642 = subInt(m_939525562, 1);
      var i_469765643 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469765643 < colontmp__469765642)) break Label3;
            i_939525581 = i_469765643;
            a_939525560[chckIndx(sub_939525561[chckIndx(i_939525581, 0, (sub_939525561).length - 1)], 0, (a_939525560).length - 1)] = subInt(subInt(m_939525562, 1), i_939525581);
            i_469765643 = addInt(i_469765643, 1);
          }
      } while (false);
    } while (false);

  
}

function nsuInitNewSkipTable(sub_939525601) {
  var result_939525602 = [new Int32Array(256)];

    nsuInitSkipTable(result_939525602[0], sub_939525601);

  return result_939525602[0];

}

function nsuFindStr(s_939525657, sub_939525658, start_939525659, last_939525660) {
  var result_939525661 = 0;

  BeforeRet: do {
    if ((subInt((s_939525657).length, start_939525659) < (sub_939525658).length)) {
    result_939525661 = -1;
    break BeforeRet;
    }
    
    if (((sub_939525658).length == 1)) {
    result_939525661 = nsuFindChar(s_939525657, sub_939525658[chckIndx(0, 0, (sub_939525658).length - 1)], start_939525659, last_939525660);
    break BeforeRet;
    }
    
    result_939525661 = nsuFindStrA(nsuInitNewSkipTable(sub_939525658), s_939525657, sub_939525658, start_939525659, last_939525660);
  } while (false);

  return result_939525661;

}

function contains_939525784(s_939525785, sub_939525786) {
  var result_939525787 = false;

  BeforeRet: do {
    result_939525787 = (0 <= nsuFindStr(s_939525785, sub_939525786, 0, 0));
    break BeforeRet;
  } while (false);

  return result_939525787;

}

function find_973078576(a_973078579, item_973078580) {
  var result_973078581 = 0;

  BeforeRet: do {
    result_973078581 = 0;
    Label1: do {
      var i_973078585 = [];
      var i_469765648 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469765648 < (a_973078579).length)) break Label3;
            i_973078585 = a_973078579[chckIndx(i_469765648, 0, (a_973078579).length - 1)];
            if (eqStrings(i_973078585, item_973078580)) {
            break BeforeRet;
            }
            
            result_973078581 = addInt(result_973078581, 1);
            i_469765648 = addInt(i_469765648, 1);
          }
      } while (false);
    } while (false);
    result_973078581 = -1;
  } while (false);

  return result_973078581;

}

function contains_973078571(a_973078573, item_973078574) {
  var result_973078575 = false;

  BeforeRet: do {
    result_973078575 = (0 <= find_973078576(a_973078573, item_973078574));
    break BeforeRet;
  } while (false);

  return result_973078575;

}

function ifValid_469763504(name_469763505, grade_469763506) {
  var result_469763507 = false;

  BeforeRet: do {
    result_469763507 = ((!(contains_939525784(name_469763505, makeNimstrLit("Physical Ed"))) && !(contains_939525784(name_469763505, makeNimstrLit("Health")))) && contains_973078571(gradeLetters_469762078, grade_469763506));
    break BeforeRet;
  } while (false);

  return result_469763507;

}

function parseFloatNative_33557268(a_33557269) {
  var result_33557270 = 0.0;

    var a2_33557271 = toJSStr(a_33557269);
      result_33557270 = Number(a2_33557271);
  

  return result_33557270;

}

function npuParseFloat(s_956301724, number_956301725, number_956301725_Idx, start_956301726) {
  var result_956301727 = 0;

    var bf_956301728 = [0.0];
    result_956301727 = nimParseBiggestFloat(s_956301724, bf_956301728, 0, start_956301726);
    if (!((result_956301727 == 0))) {
    number_956301725[number_956301725_Idx] = bf_956301728[0];
    }
    

  return result_956301727;

}

function nsuParseFloat(s_939524914) {
      var Temporary1;

  var result_939524915 = [0.0];

    result_939524915[0] = 0.0;
    var L_939524916 = npuParseFloat(s_939524914, result_939524915, 0, 0);
      if (!((L_939524916 == (s_939524914).length))) Temporary1 = true; else {        Temporary1 = (L_939524916 == 0);      }    if (Temporary1) {
    raiseException({message: (makeNimstrLit("invalid float: ") || []).concat(s_939524914 || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_939524915[0];

}

function HEX2BHEX3D_939526192(x_939526194, x_939526194_Idx, y_939526195) {
    x_939526194[x_939526194_Idx] = (x_939526194[x_939526194_Idx] + y_939526195);

  
}

function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI33555121, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function imul_687866173(a_687866174, b_687866175) {
  var result_687866176 = 0;

    var mask_687866177 = 65535;
    var aHi_687866182 = ((a_687866174 >>> 16) & mask_687866177);
    var aLo_687866183 = (a_687866174 & mask_687866177);
    var bHi_687866188 = ((b_687866175 >>> 16) & mask_687866177);
    var bLo_687866189 = (b_687866175 & mask_687866177);
    result_687866176 = ((((aLo_687866183 * bLo_687866189) >>> 0) + (((((aHi_687866182 * bLo_687866189) >>> 0) + ((aLo_687866183 * bHi_687866188) >>> 0)) >>> 0) << 16)) >>> 0);

  return result_687866176;

}

function rotl32_687866194(x_687866195, r_687866196) {
  var result_687866197 = 0;

    result_687866197 = ((x_687866195 << r_687866196) | (x_687866195 >>> subInt(32, r_687866196)));

  return result_687866197;

}

function murmurHash_687866206(x_687866207) {
  var result_687866208 = 0;

  BeforeRet: do {
    var size_687866217 = (x_687866207).length;
    var stepSize_687866218 = 4;
    var n_687866219 = divInt(size_687866217, stepSize_687866218);
    var h1_687866220 = 0;
    var i_687866221 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_687866221 < mulInt(n_687866219, stepSize_687866218))) break Label2;
          var k1_687866222 = 0;
          var j_687866223 = stepSize_687866218;
          Label3: do {
              Label4: while (true) {
              if (!(0 < j_687866223)) break Label4;
                j_687866223 = subInt(j_687866223, 1);
                k1_687866222 = ((k1_687866222 << 8) | x_687866207[chckIndx(addInt(i_687866221, j_687866223), 0, (x_687866207).length - 1)]);
              }
          } while (false);
          i_687866221 = addInt(i_687866221, stepSize_687866218);
          k1_687866222 = imul_687866173(k1_687866222, 3432918353);
          k1_687866222 = rotl32_687866194(k1_687866222, 15);
          k1_687866222 = imul_687866173(k1_687866222, 461845907);
          h1_687866220 = (h1_687866220 ^ k1_687866222);
          h1_687866220 = rotl32_687866194(h1_687866220, 13);
          h1_687866220 = ((((h1_687866220 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while (false);
    var k1_687866240 = 0;
    var rem_687866241 = modInt(size_687866217, stepSize_687866218);
    Label5: do {
        Label6: while (true) {
        if (!(0 < rem_687866241)) break Label6;
          rem_687866241 = subInt(rem_687866241, 1);
          k1_687866240 = ((k1_687866240 << 8) | x_687866207[chckIndx(addInt(i_687866221, rem_687866241), 0, (x_687866207).length - 1)]);
        }
    } while (false);
    k1_687866240 = imul_687866173(k1_687866240, 3432918353);
    k1_687866240 = rotl32_687866194(k1_687866240, 15);
    k1_687866240 = imul_687866173(k1_687866240, 461845907);
    h1_687866220 = (h1_687866220 ^ k1_687866240);
    h1_687866220 = (h1_687866220 ^ size_687866217);
    h1_687866220 = (h1_687866220 ^ (h1_687866220 >>> 16));
    h1_687866220 = imul_687866173(h1_687866220, 2246822507);
    h1_687866220 = (h1_687866220 ^ (h1_687866220 >>> 13));
    h1_687866220 = imul_687866173(h1_687866220, 3266489909);
    h1_687866220 = (h1_687866220 ^ (h1_687866220 >>> 16));
    result_687866208 = (h1_687866220 | 0);
    break BeforeRet;
  } while (false);

  return result_687866208;

}

function hash_687866305(x_687866306) {
  var result_687866307 = 0;

    result_687866307 = murmurHash_687866206((x_687866306.slice(0, (x_687866306).length - 1 + 1)));

  return result_687866307;

}

function isFilled_671088671(hcode_671088672) {
  var result_671088673 = false;

    result_671088673 = !((hcode_671088672 == 0));

  return result_671088673;

}

function nextTry_671088674(h_671088675, maxHash_671088676) {
  var result_671088677 = 0;

    result_671088677 = (addInt(h_671088675, 1) & maxHash_671088676);

  return result_671088677;

}

function rawGet_469762227(t_469762230, key_469762231, hc_469762232, hc_469762232_Idx) {
            var Temporary3;

  var result_469762233 = 0;

  BeforeRet: do {
    hc_469762232[hc_469762232_Idx] = hash_687866305(key_469762231);
    if ((hc_469762232[hc_469762232_Idx] == 0)) {
    hc_469762232[hc_469762232_Idx] = 314159265;
    }
    
    if (((t_469762230.data).length == 0)) {
    result_469762233 = -1;
    break BeforeRet;
    }
    
    var h_469762284 = (hc_469762232[hc_469762232_Idx] & (t_469762230.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_671088671(t_469762230.data[chckIndx(h_469762284, 0, (t_469762230.data).length - 1)].Field0)) break Label2;
            if (!(t_469762230.data[chckIndx(h_469762284, 0, (t_469762230.data).length - 1)].Field0 == hc_469762232[hc_469762232_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_469762230.data[chckIndx(h_469762284, 0, (t_469762230.data).length - 1)].Field1, key_469762231);            }          if (Temporary3) {
          result_469762233 = h_469762284;
          break BeforeRet;
          }
          
          h_469762284 = nextTry_671088674(h_469762284, (t_469762230.data).length - 1);
        }
    } while (false);
    result_469762233 = subInt(-1, h_469762284);
  } while (false);

  return result_469762233;

}

function raiseKeyError_620758759(key_620758761) {
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_620758761 || []), parent: null, m_type: NTI33555126, name: null, trace: [], up: null}, "KeyError");

  
}

function HEX5BHEX5D_469763878(t_469763881, key_469763882) {
  var result_469763883 = 0.0;

    var hcHEX60gensym20_469763884 = [0];
    var indexHEX60gensym20_469763891 = rawGet_469762227(t_469763881, key_469763882, hcHEX60gensym20_469763884, 0);
    if ((0 <= indexHEX60gensym20_469763891)) {
    result_469763883 = t_469763881.data[chckIndx(indexHEX60gensym20_469763891, 0, (t_469763881.data).length - 1)].Field2;
    }
    else {
    raiseKeyError_620758759(key_469763882);
    }
    

  return result_469763883;

}

function nimFloatToString_352321654(a_352321655) {
  var result_352321656 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_352321655))
      result_352321656 = a_352321655 === 0 && 1 / a_352321655 < 0 ? "-0.0" : a_352321655+".0"
    else {
      result_352321656 = a_352321655+""
      if(nimOnlyDigitsOrMinus(result_352321656)){
        result_352321656 = a_352321655+".0"
      }
    }
  

  return result_352321656;

}

function addFloat_33557372(result_33557374, result_33557374_Idx, x_33557375) {
    add_33556419(result_33557374, result_33557374_Idx, nimFloatToString_352321654(x_33557375));

  
}

function HEX24_33557368(x_33557370) {
  var result_33557371 = [[]];

    addFloat_33557372(result_33557371, 0, x_33557370);

  return result_33557371[0];

}

function parseSaturatedNatural_956301628(s_956301629, b_956301630, b_956301630_Idx, start_956301631) {
      var Temporary1;
          var Temporary4;

  var result_956301632 = 0;

    var i_956301633 = start_956301631;
    if (((i_956301633 < (s_956301629).length) && (s_956301629[chckIndx(i_956301633, 0, (s_956301629).length - 1)] == 43))) {
    i_956301633 = addInt(i_956301633, 1);
    }
    
      if (!(i_956301633 < (s_956301629).length)) Temporary1 = false; else {        Temporary1 = (ConstSet13[s_956301629[chckIndx(i_956301633, 0, (s_956301629).length - 1)]] != undefined);      }    if (Temporary1) {
    b_956301630[b_956301630_Idx] = 0;
    Label2: do {
        Label3: while (true) {
          if (!(i_956301633 < (s_956301629).length)) Temporary4 = false; else {            Temporary4 = (ConstSet14[s_956301629[chckIndx(i_956301633, 0, (s_956301629).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          var c_956301652 = subInt(s_956301629[chckIndx(i_956301633, 0, (s_956301629).length - 1)], 48);
          if ((b_956301630[b_956301630_Idx] <= divInt(subInt(2147483647, c_956301652), 10))) {
          b_956301630[b_956301630_Idx] = addInt(mulInt(b_956301630[b_956301630_Idx], 10), c_956301652);
          }
          else {
            b_956301630[b_956301630_Idx] = 2147483647;
          }
          
          i_956301633 = addInt(i_956301633, 1);
          Label5: do {
              Label6: while (true) {
              if (!((i_956301633 < (s_956301629).length) && (s_956301629[chckIndx(i_956301633, 0, (s_956301629).length - 1)] == 95))) break Label6;
                i_956301633 = addInt(i_956301633, 1);
              }
          } while (false);
        }
    } while (false);
    result_956301632 = subInt(i_956301633, start_956301631);
    }
    

  return result_956301632;

}

function HEX5BHEX5D_1040190618(s_1040190621, x_1040190622) {
  var result_1040190623 = [];

    var a_1040190625 = x_1040190622.a;
    var L_1040190627 = addInt(subInt(subInt((s_1040190621).length, x_1040190622.b), a_1040190625), 1);
    result_1040190623 = nimCopy(null, mnewString(chckRange(L_1040190627, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_1040190632 = 0;
      var i_469765663 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469765663 < L_1040190627)) break Label3;
            i_1040190632 = i_469765663;
            result_1040190623[chckIndx(i_1040190632, 0, (result_1040190623).length - 1)] = s_1040190621[chckIndx(addInt(i_1040190632, a_1040190625), 0, (s_1040190621).length - 1)];
            i_469765663 = addInt(i_469765663, 1);
          }
      } while (false);
    } while (false);

  return result_1040190623;

}

function HEX2EHEX2E_973078608(a_973078611, b_973078612) {
  var result_973078615 = ({a: 0, b: 0});

    result_973078615 = nimCopy(result_973078615, {a: a_973078611, b: b_973078612}, NTI973078607);

  return result_973078615;

}

function parseStandardFormatSpecifier_1107296314(s_1107296315, start_1107296316, ignoreUnknownSuffix_1107296317) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_1107296318 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_1107296318.fill = 32;
    result_1107296318.align = 0;
    result_1107296318.sign = 45;
    var i_1107296320 = start_1107296316;
    if (((addInt(i_1107296320, 1) < (s_1107296315).length) && (ConstSet9[s_1107296315[chckIndx(addInt(i_1107296320, 1), 0, (s_1107296315).length - 1)]] != undefined))) {
    result_1107296318.fill = s_1107296315[chckIndx(i_1107296320, 0, (s_1107296315).length - 1)];
    result_1107296318.align = s_1107296315[chckIndx(addInt(i_1107296320, 1), 0, (s_1107296315).length - 1)];
    i_1107296320 = addInt(i_1107296320, 2);
    }
    else {
    if (((i_1107296320 < (s_1107296315).length) && (ConstSet10[s_1107296315[chckIndx(i_1107296320, 0, (s_1107296315).length - 1)]] != undefined))) {
    result_1107296318.align = s_1107296315[chckIndx(i_1107296320, 0, (s_1107296315).length - 1)];
    i_1107296320 = addInt(i_1107296320, 1);
    }
    }
    if (((i_1107296320 < (s_1107296315).length) && (ConstSet11[s_1107296315[chckIndx(i_1107296320, 0, (s_1107296315).length - 1)]] != undefined))) {
    result_1107296318.sign = s_1107296315[chckIndx(i_1107296320, 0, (s_1107296315).length - 1)];
    i_1107296320 = addInt(i_1107296320, 1);
    }
    
    if (((i_1107296320 < (s_1107296315).length) && (s_1107296315[chckIndx(i_1107296320, 0, (s_1107296315).length - 1)] == 35))) {
    result_1107296318.alternateForm = true;
    i_1107296320 = addInt(i_1107296320, 1);
    }
    
      if (!((addInt(i_1107296320, 1) < (s_1107296315).length) && (s_1107296315[chckIndx(i_1107296320, 0, (s_1107296315).length - 1)] == 48))) Temporary1 = false; else {        Temporary1 = (ConstSet12[s_1107296315[chckIndx(addInt(i_1107296320, 1), 0, (s_1107296315).length - 1)]] != undefined);      }    if (Temporary1) {
    result_1107296318.padWithZero = true;
    i_1107296320 = addInt(i_1107296320, 1);
    }
    
    var parsedLength_1107296357 = parseSaturatedNatural_956301628(s_1107296315, result_1107296318, "minimumWidth", i_1107296320);
    i_1107296320 = addInt(i_1107296320, parsedLength_1107296357);
    if (((i_1107296320 < (s_1107296315).length) && (s_1107296315[chckIndx(i_1107296320, 0, (s_1107296315).length - 1)] == 46))) {
    i_1107296320 = addInt(i_1107296320, 1);
    var parsedLengthB_1107296366 = parseSaturatedNatural_956301628(s_1107296315, result_1107296318, "precision", i_1107296320);
    i_1107296320 = addInt(i_1107296320, parsedLengthB_1107296366);
    }
    else {
      result_1107296318.precision = -1;
    }
    
      if (!(i_1107296320 < (s_1107296315).length)) Temporary2 = false; else {        Temporary2 = (ConstSet15[s_1107296315[chckIndx(i_1107296320, 0, (s_1107296315).length - 1)]] != undefined);      }    if (Temporary2) {
    result_1107296318.typ = s_1107296315[chckIndx(i_1107296320, 0, (s_1107296315).length - 1)];
    i_1107296320 = addInt(i_1107296320, 1);
    }
    
    result_1107296318.endPosition = i_1107296320;
      if (!!((i_1107296320 == (s_1107296315).length))) Temporary3 = false; else {        Temporary3 = !(ignoreUnknownSuffix_1107296317);      }    if (Temporary3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_1040190618(s_1107296315, HEX2EHEX2E_973078608(i_1107296320, 1)) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_1107296318;

}

function nsuformatBiggestFloat(f_939526009, format_939526010, precision_939526011, decimalSep_939526012) {
  var result_939526013 = [];

    var precision_939526014 = precision_939526011;
    if ((precision_939526014 == -1)) {
    precision_939526014 = 6;
    }
    
    var res_939526015 = null;
    switch (format_939526010) {
    case 0:
      res_939526015 = f_939526009.toString();
      break;
    case 1:
      res_939526015 = f_939526009.toFixed(precision_939526014);
      break;
    case 2:
      res_939526015 = f_939526009.toExponential(precision_939526014);
      break;
    }
    result_939526013 = nimCopy(null, cstrToNimstr(res_939526015), NTI33554439);
    if (((1.0 / f_939526009) == -Infinity)) {
    result_939526013 = nimCopy(null, (makeNimstrLit("-") || []).concat(cstrToNimstr(res_939526015) || []), NTI33554439);
    }
    
    Label1: do {
      var i_939526020 = 0;
      var colontmp__469765666 = 0;
      colontmp__469765666 = (result_939526013).length;
      var i_469765667 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469765667 < colontmp__469765666)) break Label3;
            i_939526020 = i_469765667;
            if ((ConstSet16[result_939526013[chckIndx(i_939526020, 0, (result_939526013).length - 1)]] != undefined)) {
            result_939526013[chckIndx(i_939526020, 0, (result_939526013).length - 1)] = decimalSep_939526012;
            }
            
            i_469765667 = addInt(i_469765667, 1);
          }
      } while (false);
    } while (false);

  return result_939526013;

}

function insert_33557846(x_33557847, x_33557847_Idx, item_33557848, i_33557849) {
    var xl_33557850 = (x_33557847[x_33557847_Idx]).length;
    (x_33557847[x_33557847_Idx].length = chckRange(addInt(xl_33557850, (item_33557848).length), 0, 2147483647));
    var j_33557851 = subInt(xl_33557850, 1);
    Label1: do {
        Label2: while (true) {
        if (!(i_33557849 <= j_33557851)) break Label2;
          x_33557847[x_33557847_Idx][chckIndx(addInt(j_33557851, (item_33557848).length), 0, (x_33557847[x_33557847_Idx]).length - 1)] = x_33557847[x_33557847_Idx][chckIndx(j_33557851, 0, (x_33557847[x_33557847_Idx]).length - 1)];
          j_33557851 = subInt(j_33557851, 1);
        }
    } while (false);
    j_33557851 = 0;
    Label3: do {
        Label4: while (true) {
        if (!(j_33557851 < (item_33557848).length)) break Label4;
          x_33557847[x_33557847_Idx][chckIndx(addInt(j_33557851, i_33557849), 0, (x_33557847[x_33557847_Idx]).length - 1)] = item_33557848[chckIndx(j_33557851, 0, (item_33557848).length - 1)];
          j_33557851 = addInt(j_33557851, 1);
        }
    } while (false);

  
}

function nsuRepeatChar(c_939525115, count_939525116) {
  var result_939525117 = [];

    result_939525117 = nimCopy(null, mnewString(count_939525116), NTI33554439);
    Label1: do {
      var i_939525122 = 0;
      var colontmp__469765672 = 0;
      colontmp__469765672 = subInt(count_939525116, 1);
      var res_469765673 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469765673 <= colontmp__469765672)) break Label3;
            i_939525122 = res_469765673;
            result_939525117[chckIndx(i_939525122, 0, (result_939525117).length - 1)] = c_939525115;
            res_469765673 = addInt(res_469765673, 1);
          }
      } while (false);
    } while (false);

  return result_939525117;

}

function validateUtf8_1040187669(s_1040187670) {
            var Temporary3;
            var Temporary4;
            var Temporary5;
            var Temporary6;
            var Temporary7;
            var Temporary8;

  var result_1040187671 = 0;

  BeforeRet: do {
    var i_1040187672 = 0;
    var L_1040187673 = (s_1040187670).length;
    Label1: do {
        Label2: while (true) {
        if (!(i_1040187672 < L_1040187673)) break Label2;
          if ((s_1040187670[chckIndx(i_1040187672, 0, (s_1040187670).length - 1)] <= 127)) {
          i_1040187672 = addInt(i_1040187672, 1);
          }
          else {
          if (((s_1040187670[chckIndx(i_1040187672, 0, (s_1040187670).length - 1)] >>> 5) == 6)) {
          if ((s_1040187670[chckIndx(i_1040187672, 0, (s_1040187670).length - 1)] < 194)) {
          result_1040187671 = i_1040187672;
          break BeforeRet;
          }
          
            if (!(addInt(i_1040187672, 1) < L_1040187673)) Temporary3 = false; else {              Temporary3 = ((s_1040187670[chckIndx(addInt(i_1040187672, 1), 0, (s_1040187670).length - 1)] >>> 6) == 2);            }          if (Temporary3) {
          i_1040187672 = addInt(i_1040187672, 2);
          }
          else {
            result_1040187671 = i_1040187672;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_1040187670[chckIndx(i_1040187672, 0, (s_1040187670).length - 1)] >>> 4) == 14)) {
            if (!(addInt(i_1040187672, 2) < L_1040187673)) Temporary5 = false; else {              Temporary5 = ((s_1040187670[chckIndx(addInt(i_1040187672, 1), 0, (s_1040187670).length - 1)] >>> 6) == 2);            }            if (!Temporary5) Temporary4 = false; else {              Temporary4 = ((s_1040187670[chckIndx(addInt(i_1040187672, 2), 0, (s_1040187670).length - 1)] >>> 6) == 2);            }          if (Temporary4) {
          i_1040187672 = addInt(i_1040187672, 3);
          }
          else {
            result_1040187671 = i_1040187672;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_1040187670[chckIndx(i_1040187672, 0, (s_1040187670).length - 1)] >>> 3) == 30)) {
            if (!(addInt(i_1040187672, 3) < L_1040187673)) Temporary8 = false; else {              Temporary8 = ((s_1040187670[chckIndx(addInt(i_1040187672, 1), 0, (s_1040187670).length - 1)] >>> 6) == 2);            }            if (!Temporary8) Temporary7 = false; else {              Temporary7 = ((s_1040187670[chckIndx(addInt(i_1040187672, 2), 0, (s_1040187670).length - 1)] >>> 6) == 2);            }            if (!Temporary7) Temporary6 = false; else {              Temporary6 = ((s_1040187670[chckIndx(addInt(i_1040187672, 3), 0, (s_1040187670).length - 1)] >>> 6) == 2);            }          if (Temporary6) {
          i_1040187672 = addInt(i_1040187672, 4);
          }
          else {
            result_1040187671 = i_1040187672;
            break BeforeRet;
          }
          
          }
          else {
            result_1040187671 = i_1040187672;
            break BeforeRet;
          }
          }}}
        }
    } while (false);
    result_1040187671 = -1;
    break BeforeRet;
  } while (false);

  return result_1040187671;

}

function nucruneLen(s_1040187402) {
  var result_1040187403 = 0;

    result_1040187403 = 0;
    var i_1040187404 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_1040187404 < (s_1040187402).length)) break Label2;
          if ((s_1040187402[chckIndx(i_1040187404, 0, (s_1040187402).length - 1)] <= 127)) {
          i_1040187404 = addInt(i_1040187404, 1);
          }
          else {
          if (((s_1040187402[chckIndx(i_1040187404, 0, (s_1040187402).length - 1)] >>> 5) == 6)) {
          i_1040187404 = addInt(i_1040187404, 2);
          }
          else {
          if (((s_1040187402[chckIndx(i_1040187404, 0, (s_1040187402).length - 1)] >>> 4) == 14)) {
          i_1040187404 = addInt(i_1040187404, 3);
          }
          else {
          if (((s_1040187402[chckIndx(i_1040187404, 0, (s_1040187402).length - 1)] >>> 3) == 30)) {
          i_1040187404 = addInt(i_1040187404, 4);
          }
          else {
          if (((s_1040187402[chckIndx(i_1040187404, 0, (s_1040187402).length - 1)] >>> 2) == 62)) {
          i_1040187404 = addInt(i_1040187404, 5);
          }
          else {
          if (((s_1040187402[chckIndx(i_1040187404, 0, (s_1040187402).length - 1)] >>> 1) == 126)) {
          i_1040187404 = addInt(i_1040187404, 6);
          }
          else {
          i_1040187404 = addInt(i_1040187404, 1);
          }
          }}}}}
          result_1040187403 = addInt(result_1040187403, 1);
        }
    } while (false);

  return result_1040187403;

}

function alignString_1107296276(s_1107296277, minimumWidth_1107296278, align_1107296279, fill_1107296280) {
      var Temporary1;

  var result_1107296281 = [];

    if ((minimumWidth_1107296278 == 0)) {
    result_1107296281 = nimCopy(null, s_1107296277, NTI33554439);
    }
    else {
      if ((validateUtf8_1040187669(s_1107296277) == -1)) {
      Temporary1 = nucruneLen(s_1107296277);
      }
      else {
      Temporary1 = (s_1107296277).length;
      }
      
      var sRuneLen_1107296282 = Temporary1;
      var toFill_1107296283 = subInt(minimumWidth_1107296278, sRuneLen_1107296282);
      if ((toFill_1107296283 <= 0)) {
      result_1107296281 = nimCopy(null, s_1107296277, NTI33554439);
      }
      else {
      if (((align_1107296279 == 60) || (align_1107296279 == 0))) {
      result_1107296281 = nimCopy(null, (s_1107296277 || []).concat(nsuRepeatChar(fill_1107296280, chckRange(toFill_1107296283, 0, 2147483647)) || []), NTI33554439);
      }
      else {
      if ((align_1107296279 == 94)) {
      var half_1107296284 = divInt(toFill_1107296283, 2);
      result_1107296281 = nimCopy(null, (nsuRepeatChar(fill_1107296280, chckRange(half_1107296284, 0, 2147483647)) || []).concat(s_1107296277 || [],nsuRepeatChar(fill_1107296280, chckRange(subInt(toFill_1107296283, half_1107296284), 0, 2147483647)) || []), NTI33554439);
      }
      else {
        result_1107296281 = nimCopy(null, (nsuRepeatChar(fill_1107296280, chckRange(toFill_1107296283, 0, 2147483647)) || []).concat(s_1107296277 || []), NTI33554439);
      }
      }}
    }
    

  return result_1107296281;

}

function nsuToUpperAsciiChar(c_939524183) {
  var result_939524184 = 0;

    if ((ConstSet18[c_939524183] != undefined)) {
    result_939524184 = (c_939524183 ^ 32);
    }
    else {
      result_939524184 = c_939524183;
    }
    

  return result_939524184;

}

function nsuToUpperAsciiStr(s_939524190) {
  var result_939524191 = [];

    result_939524191 = nimCopy(null, mnewString(chckRange((s_939524190).length, 0, 2147483647)), NTI33554439);
    Label1: do {
      var iHEX60gensym11_939524197 = 0;
      var colontmp__469765678 = 0;
      colontmp__469765678 = subInt((s_939524190).length, 1);
      var res_469765679 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469765679 <= colontmp__469765678)) break Label3;
            iHEX60gensym11_939524197 = res_469765679;
            result_939524191[chckIndx(iHEX60gensym11_939524197, 0, (result_939524191).length - 1)] = nsuToUpperAsciiChar(s_939524190[chckIndx(iHEX60gensym11_939524197, 0, (s_939524190).length - 1)]);
            res_469765679 = addInt(res_469765679, 1);
          }
      } while (false);
    } while (false);

  return result_939524191;

}

function formatValue_469765222(result_469765224, result_469765224_Idx, value_469765225, specifier_469765226) {
    var Temporary1;

  BeforeRet: do {
    if (((specifier_469765226).length == 0)) {
    result_469765224[result_469765224_Idx].push.apply(result_469765224[result_469765224_Idx], HEX24_33557368(value_469765225));;
    break BeforeRet;
    }
    
    var spec_469765230 = parseStandardFormatSpecifier_1107296314(specifier_469765226, 0, false);
    var fmode_469765231 = 0;
    switch (spec_469765230.typ) {
    case 101:
    case 69:
      fmode_469765231 = 2;
      break;
    case 102:
    case 70:
      fmode_469765231 = 1;
      break;
    case 103:
    case 71:
      fmode_469765231 = 0;
      break;
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ") || []).concat([spec_469765230.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    var f_469765233 = [nsuformatBiggestFloat(value_469765225, fmode_469765231, chckRange(spec_469765230.precision, -1, 32), 46)];
    var sign_469765234 = false;
    if ((0.0 <= value_469765225)) {
    if (!((spec_469765230.sign == 45))) {
    sign_469765234 = true;
    if ((value_469765225 == 0.0)) {
    if (((1.0 / value_469765225) == Infinity)) {
    insert_33557846(f_469765233, 0, nimCharToStr(spec_469765230.sign), 0);
    }
    
    }
    else {
    insert_33557846(f_469765233, 0, nimCharToStr(spec_469765230.sign), 0);
    }
    
    }
    
    }
    else {
      sign_469765234 = true;
    }
    
    if (spec_469765230.padWithZero) {
    var signStr_469765235 = [];
    if (sign_469765234) {
    signStr_469765235 = nimCopy(null, nimCharToStr(f_469765233[0][chckIndx(0, 0, (f_469765233[0]).length - 1)]), NTI33554439);
    f_469765233[0] = nimCopy(null, HEX5BHEX5D_1040190618(f_469765233[0], HEX2EHEX2E_973078608(1, 1)), NTI33554439);
    }
    
    var toFill_469765257 = subInt(subInt(spec_469765230.minimumWidth, (f_469765233[0]).length), (sign_469765234 ? 1 : 0));
    if ((0 < toFill_469765257)) {
    f_469765233[0] = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_469765257, 0, 2147483647)) || []).concat(f_469765233[0] || []), NTI33554439);
    }
    
    if (sign_469765234) {
    f_469765233[0] = nimCopy(null, (signStr_469765235 || []).concat(f_469765233[0] || []), NTI33554439);
    }
    
    }
    
    if ((spec_469765230.align == 0)) {
    Temporary1 = 62;
    }
    else {
    Temporary1 = spec_469765230.align;
    }
    
    var align_469765258 = Temporary1;
    var res_469765259 = alignString_1107296276(f_469765233[0], spec_469765230.minimumWidth, align_469765258, spec_469765230.fill);
    if ((ConstSet17[spec_469765230.typ] != undefined)) {
    result_469765224[result_469765224_Idx].push.apply(result_469765224[result_469765224_Idx], nsuToUpperAsciiStr(res_469765259));;
    }
    else {
    result_469765224[result_469765224_Idx].push.apply(result_469765224[result_469765224_Idx], res_469765259);;
    }
    
  } while (false);

  
}

function HEX2DHEX3D_469765303(x_469765305, x_469765305_Idx, y_469765306) {
    x_469765305[x_469765305_Idx] = (x_469765305[x_469765305_Idx] - y_469765306);

  
}

function round_469765299(x_469765301) {
  var result_469765302 = [0.0];

    if ((0.0 <= x_469765301)) {
    result_469765302[0] = Math.round(x_469765301);
    }
    else {
      result_469765302[0] = Math.ceil(x_469765301);
      if ((0.5 <= (result_469765302[0] - x_469765301))) {
      HEX2DHEX3D_469765303(result_469765302, 0, 1.0);
      }
      
    }
    

  return result_469765302[0];

}

function round_469765294(x_469765296, places_469765297) {
  var result_469765298 = 0.0;

    if ((places_469765297 == 0)) {
    result_469765298 = round_469765299(x_469765296);
    }
    else {
      var mult_469765307 = Math.pow(10.0, places_469765297);
      result_469765298 = (round_469765299((x_469765296 * mult_469765307)) / mult_469765307);
    }
    

  return result_469765298;

}

function integerOutOfRangeError_956301560() {
    raiseException({message: makeNimstrLit("Parsed integer outside of valid range"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");

  
}

function rawParseInt_956301562(s_956301563, b_956301564, b_956301564_Idx, start_956301565) {
      var Temporary1;
          var Temporary4;
      var Temporary7;

  var result_956301566 = 0;

    var sign_956301567 = -1;
    var i_956301568 = start_956301565;
    if ((i_956301568 < (s_956301563).length)) {
    if ((s_956301563[chckIndx(i_956301568, 0, (s_956301563).length - 1)] == 43)) {
    i_956301568 += 1;
    }
    else {
    if ((s_956301563[chckIndx(i_956301568, 0, (s_956301563).length - 1)] == 45)) {
    i_956301568 += 1;
    sign_956301567 = 1;
    }
    }
    }
    
      if (!(i_956301568 < (s_956301563).length)) Temporary1 = false; else {        Temporary1 = (ConstSet19[s_956301563[chckIndx(i_956301568, 0, (s_956301563).length - 1)]] != undefined);      }    if (Temporary1) {
    b_956301564[b_956301564_Idx] = 0;
    Label2: do {
        Label3: while (true) {
          if (!(i_956301568 < (s_956301563).length)) Temporary4 = false; else {            Temporary4 = (ConstSet20[s_956301563[chckIndx(i_956301568, 0, (s_956301563).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          var c_956301591 = (s_956301563[chckIndx(i_956301568, 0, (s_956301563).length - 1)] - 48);
          if ((Math.trunc((-9223372036854775808 + c_956301591) / 10) <= b_956301564[b_956301564_Idx])) {
          b_956301564[b_956301564_Idx] = ((b_956301564[b_956301564_Idx] * 10) - c_956301591);
          }
          else {
          integerOutOfRangeError_956301560();
          }
          
          i_956301568 += 1;
          Label5: do {
              Label6: while (true) {
              if (!((i_956301568 < (s_956301563).length) && (s_956301563[chckIndx(i_956301568, 0, (s_956301563).length - 1)] == 95))) break Label6;
                i_956301568 += 1;
              }
          } while (false);
        }
    } while (false);
      if (!(sign_956301567 == -1)) Temporary7 = false; else {        Temporary7 = (b_956301564[b_956301564_Idx] == -9223372036854775808);      }    if (Temporary7) {
    integerOutOfRangeError_956301560();
    }
    else {
      b_956301564[b_956301564_Idx] = (b_956301564[b_956301564_Idx] * sign_956301567);
      result_956301566 = (i_956301568 - start_956301565);
    }
    
    }
    

  return result_956301566;

}

function npuParseBiggestInt(s_956301609, number_956301610, number_956301610_Idx, start_956301611) {
  var result_956301612 = 0;

    var res_956301613 = [0];
    result_956301612 = rawParseInt_956301562(s_956301609, res_956301613, 0, start_956301611);
    if (!((result_956301612 == 0))) {
    number_956301610[number_956301610_Idx] = res_956301613[0];
    }
    

  return result_956301612;

}

function npuParseInt(s_956301615, number_956301616, number_956301616_Idx, start_956301617) {
      var Temporary1;

  var result_956301618 = 0;

    var res_956301619 = [0];
    result_956301618 = npuParseBiggestInt(s_956301615, res_956301619, 0, start_956301617);
      if ((res_956301619[0] < -2147483648)) Temporary1 = true; else {        Temporary1 = (2147483647 < res_956301619[0]);      }    if (Temporary1) {
    integerOutOfRangeError_956301560();
    }
    
    if (!((result_956301618 == 0))) {
    number_956301616[number_956301616_Idx] = chckRange(res_956301619[0], -2147483648, 2147483647);
    }
    

  return result_956301618;

}

function nsuParseInt(s_939524894) {
      var Temporary1;

  var result_939524895 = [0];

    result_939524895[0] = 0;
    var L_939524896 = npuParseInt(s_939524894, result_939524895, 0, 0);
      if (!((L_939524896 == (s_939524894).length))) Temporary1 = true; else {        Temporary1 = (L_939524896 == 0);      }    if (Temporary1) {
    raiseException({message: (makeNimstrLit("invalid integer: ") || []).concat(s_939524894 || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_939524895[0];

}

function raiseLetterGrade_469763554(letterGrade_469763555) {
  var result_469763556 = [];

  BeforeRet: do {
    Label1: do {
      var i_469763609 = 0;
      var res_469765684 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469765684 <= 12)) break Label3;
            i_469763609 = res_469765684;
            if (eqStrings(gradeLetters_469762078[chckIndx(i_469763609, 0, (gradeLetters_469762078).length - 1)], letterGrade_469763555)) {
            if ((i_469763609 <= 0)) {
            result_469763556 = nimCopy(null, makeNimstrLit("A+"), NTI33554439);
            break BeforeRet;
            }
            
            result_469763556 = nimCopy(null, gradeLetters_469762078[chckIndx(subInt(i_469763609, 1), 0, (gradeLetters_469762078).length - 1)], NTI33554439);
            break BeforeRet;
            }
            
            res_469765684 = addInt(res_469765684, 1);
          }
      } while (false);
    } while (false);
    result_469763556 = nimCopy(null, makeNimstrLit("A+"), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_469763556;

}

function lowerLetterGrade_469763610(letterGrade_469763611) {
  var result_469763612 = [];

  BeforeRet: do {
    Label1: do {
      var i_469763664 = 0;
      var res_469765687 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469765687 <= 12)) break Label3;
            i_469763664 = res_469765687;
            if (eqStrings(gradeLetters_469762078[chckIndx(i_469763664, 0, (gradeLetters_469762078).length - 1)], letterGrade_469763611)) {
            if ((12 <= i_469763664)) {
            result_469763612 = nimCopy(null, makeNimstrLit("F"), NTI33554439);
            break BeforeRet;
            }
            
            result_469763612 = nimCopy(null, gradeLetters_469762078[chckIndx(addInt(i_469763664, 1), 0, (gradeLetters_469762078).length - 1)], NTI33554439);
            break BeforeRet;
            }
            
            res_469765687 = addInt(res_469765687, 1);
          }
      } while (false);
    } while (false);
    result_469763612 = nimCopy(null, makeNimstrLit("F"), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_469763612;

}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function runeLenAt_1040187457(s_1040187458, i_1040187459) {
  var result_1040187460 = 0;

    if ((s_1040187458[chckIndx(i_1040187459, 0, (s_1040187458).length - 1)] <= 127)) {
    result_1040187460 = 1;
    }
    else {
    if (((s_1040187458[chckIndx(i_1040187459, 0, (s_1040187458).length - 1)] >>> 5) == 6)) {
    result_1040187460 = 2;
    }
    else {
    if (((s_1040187458[chckIndx(i_1040187459, 0, (s_1040187458).length - 1)] >>> 4) == 14)) {
    result_1040187460 = 3;
    }
    else {
    if (((s_1040187458[chckIndx(i_1040187459, 0, (s_1040187458).length - 1)] >>> 3) == 30)) {
    result_1040187460 = 4;
    }
    else {
    if (((s_1040187458[chckIndx(i_1040187459, 0, (s_1040187458).length - 1)] >>> 2) == 62)) {
    result_1040187460 = 5;
    }
    else {
    if (((s_1040187458[chckIndx(i_1040187459, 0, (s_1040187458).length - 1)] >>> 1) == 126)) {
    result_1040187460 = 6;
    }
    else {
      result_1040187460 = 1;
    }
    }}}}}

  return result_1040187460;

}

function runeOffset_1040188029(s_1040188030, pos_1040188031, start_1040188032) {
  var result_1040188033 = 0;

  BeforeRet: do {
    var i_1040188034 = 0;
    var o_1040188035 = start_1040188032;
    Label1: do {
        Label2: while (true) {
        if (!(i_1040188034 < pos_1040188031)) break Label2;
          o_1040188035 = addInt(o_1040188035, chckRange(runeLenAt_1040187457(s_1040188030, o_1040188035), 0, 2147483647));
          if (((s_1040188030).length <= o_1040188035)) {
          result_1040188033 = -1;
          break BeforeRet;
          }
          
          i_1040188034 = addInt(i_1040188034, 1);
        }
    } while (false);
    result_1040188033 = o_1040188035;
    break BeforeRet;
  } while (false);

  return result_1040188033;

}

function formatValue_1107296418(result_1107296419, result_1107296419_Idx, value_1107296420, specifier_1107296421) {
    var spec_1107296422 = parseStandardFormatSpecifier_1107296314(specifier_1107296421, 0, false);
    var value_1107296423 = nimCopy(null, value_1107296420, NTI33554439);
    switch (spec_1107296422.typ) {
    case 115:
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_1107296422.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_1107296422.precision == -1))) {
    if ((spec_1107296422.precision < nucruneLen(value_1107296423))) {
    (value_1107296423.length = chckRange(runeOffset_1040188029(value_1107296423, chckRange(spec_1107296422.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    result_1107296419[result_1107296419_Idx].push.apply(result_1107296419[result_1107296419_Idx], alignString_1107296276(value_1107296423, spec_1107296422.minimumWidth, spec_1107296422.align, spec_1107296422.fill));;

  
}

function main_469763712() {
              var Temporary4;
            var Temporary5;
            var Temporary6;
            var Temporary7;
            var Temporary8;
            var Temporary9;
              var Temporary11;
              var Temporary12;

function calculateGpaNumWithCustomCredits_469763771(ccourses_469763772, cgrades_469763773, ccredits_469763774) {
  var result_469763775 = {Field0: 0.0, Field1: 0.0};

  BeforeRet: do {
    var credits_469763783 = newSeq_469763735(0);
    var total_credits_469763784 = [0.0];
    Label1: do {
      var i_469763792 = 0;
      var colontmp__469765575 = 0;
      colontmp__469765575 = subInt((ccredits_469763774).length, 1);
      var res_469765576 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469765576 <= colontmp__469765575)) break Label3;
            i_469763792 = res_469765576;
            var parsed_469763793 = nsuParseFloat(ccredits_469763774[chckIndx(i_469763792, 0, (ccredits_469763774).length - 1)]);
            credits_469763783.push(parsed_469763793);;
            HEX2BHEX3D_939526192(total_credits_469763784, 0, parsed_469763793);
            res_469765576 = addInt(res_469765576, 1);
          }
      } while (false);
    } while (false);
    var qualityPoints_469763802 = [0.0];
    var unweightedgpas_469763810 = newSeq_469763735(0);
    var unweightedgpa_469763811 = 0.0;
    var unweightedQualityPoints_469763812 = [0.0];
    gpas_469763752 = nimCopy(null, [], NTI469763063);
    Label4: do {
      var i_469763824 = 0;
      var colontmp__469765579 = 0;
      colontmp__469765579 = subInt((ccourses_469763772).length, 1);
      var res_469765580 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_469765580 <= colontmp__469765579)) break Label6;
            i_469763824 = res_469765580;
            if (contains_939525784(ccourses_469763772[chckIndx(i_469763824, 0, (ccourses_469763772).length - 1)], makeNimstrLit("AP"))) {
            gpas_469763752.push((HEX5BHEX5D_469763878(gpaRegular_469763459, cgrades_469763773[chckIndx(i_469763824, 0, (cgrades_469763773).length - 1)]) + HEX5BHEX5D_469763878(gpaWeighted_469763464, makeNimstrLit("AP"))));;
            }
            else {
            if (contains_939525784(ccourses_469763772[chckIndx(i_469763824, 0, (ccourses_469763772).length - 1)], makeNimstrLit("Honors"))) {
            gpas_469763752.push((HEX5BHEX5D_469763878(gpaRegular_469763459, cgrades_469763773[chckIndx(i_469763824, 0, (cgrades_469763773).length - 1)]) + HEX5BHEX5D_469763878(gpaWeighted_469763464, makeNimstrLit("Honors"))));;
            }
            else {
            if (contains_939525784(ccourses_469763772[chckIndx(i_469763824, 0, (ccourses_469763772).length - 1)], makeNimstrLit("(E)"))) {
            gpas_469763752.push((HEX5BHEX5D_469763878(gpaRegular_469763459, cgrades_469763773[chckIndx(i_469763824, 0, (cgrades_469763773).length - 1)]) + HEX5BHEX5D_469763878(gpaWeighted_469763464, makeNimstrLit("Enriched"))));;
            }
            else {
            gpas_469763752.push(HEX5BHEX5D_469763878(gpaRegular_469763459, cgrades_469763773[chckIndx(i_469763824, 0, (cgrades_469763773).length - 1)]));;
            }
            }}
            res_469765580 = addInt(res_469765580, 1);
          }
      } while (false);
    } while (false);
    Label7: do {
      var i_469764319 = 0;
      var colontmp__469765583 = 0;
      colontmp__469765583 = subInt((ccourses_469763772).length, 1);
      var res_469765584 = 0;
      Label8: do {
          Label9: while (true) {
          if (!(res_469765584 <= colontmp__469765583)) break Label9;
            i_469764319 = res_469765584;
            HEX2BHEX3D_939526192(qualityPoints_469763802, 0, (gpas_469763752[chckIndx(i_469764319, 0, (gpas_469763752).length - 1)] * credits_469763783[chckIndx(i_469764319, 0, (credits_469763783).length - 1)]));
            res_469765584 = addInt(res_469765584, 1);
          }
      } while (false);
    } while (false);
    var gpa_469764324 = (qualityPoints_469763802[0] / total_credits_469763784[0]);
    Label10: do {
      var i_469764332 = 0;
      var colontmp__469765587 = 0;
      colontmp__469765587 = subInt((cgrades_469763773).length, 1);
      var res_469765588 = 0;
      Label11: do {
          Label12: while (true) {
          if (!(res_469765588 <= colontmp__469765587)) break Label12;
            i_469764332 = res_469765588;
            unweightedgpas_469763810.push(HEX5BHEX5D_469763878(gpaRegular_469763459, cgrades_469763773[chckIndx(i_469764332, 0, (cgrades_469763773).length - 1)]));;
            res_469765588 = addInt(res_469765588, 1);
          }
      } while (false);
    } while (false);
    Label13: do {
      var i_469764402 = 0;
      var colontmp__469765591 = 0;
      colontmp__469765591 = subInt((cgrades_469763773).length, 1);
      var res_469765592 = 0;
      Label14: do {
          Label15: while (true) {
          if (!(res_469765592 <= colontmp__469765591)) break Label15;
            i_469764402 = res_469765592;
            HEX2BHEX3D_939526192(unweightedQualityPoints_469763812, 0, (unweightedgpas_469763810[chckIndx(i_469764402, 0, (unweightedgpas_469763810).length - 1)] * credits_469763783[chckIndx(i_469764402, 0, (credits_469763783).length - 1)]));
            res_469765592 = addInt(res_469765592, 1);
          }
      } while (false);
    } while (false);
    unweightedgpa_469763811 = (unweightedQualityPoints_469763812[0] / total_credits_469763784[0]);
    var colontmp__469765594 = gpa_469764324;
    var colontmp__469765595 = unweightedgpa_469763811;
    result_469763775 = nimCopy(result_469763775, {Field0: colontmp__469765594, Field1: colontmp__469765595}, NTI469763020);
    break BeforeRet;
  } while (false);

  return result_469763775;

}

function calculateGpaNum_469764416(ccourses_469764417, cgrades_469764418) {
  var result_469764419 = {Field0: 0.0, Field1: 0.0};

  BeforeRet: do {
    var credits_469764427 = newSeq_469763735(0);
    var total_credits_469764428 = [0.0];
    var qualityPoints_469764429 = [0.0];
    var unweightedgpas_469764437 = newSeq_469763735(0);
    var unweightedgpa_469764438 = 0.0;
    var unweightedQualityPoints_469764439 = [0.0];
    Label1: do {
      var course_469764460 = [];
      var i_469765599 = 0;
      var L_469765600 = (ccourses_469764417).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_469765599 < L_469765600)) break Label3;
            course_469764460 = ccourses_469764417[chckIndx(i_469765599, 0, (ccourses_469764417).length - 1)];
            if (contains_973078571(halfYear_469763465, course_469764460)) {
            credits_469764427.push(0.5);;
            HEX2BHEX3D_939526192(total_credits_469764428, 0, 0.5);
            }
            else {
            if (contains_973078571(labs_469763466, course_469764460)) {
            credits_469764427.push(1.17);;
            HEX2BHEX3D_939526192(total_credits_469764428, 0, 1.17);
            }
            else {
            if (contains_973078571(semester_469763467, course_469764460)) {
            credits_469764427.push(0.6);;
            HEX2BHEX3D_939526192(total_credits_469764428, 0, 0.6);
            }
            else {
              credits_469764427.push(1.0);;
              HEX2BHEX3D_939526192(total_credits_469764428, 0, 1.0);
            }
            }}
            i_469765599 = addInt(i_469765599, 1);
            if (!(((ccourses_469764417).length == L_469765600))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    gpas_469763752 = nimCopy(null, [], NTI469763509);
    Label4: do {
      var i_469764642 = 0;
      var colontmp__469765603 = 0;
      colontmp__469765603 = subInt((ccourses_469764417).length, 1);
      var res_469765604 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_469765604 <= colontmp__469765603)) break Label6;
            i_469764642 = res_469765604;
            if (contains_939525784(ccourses_469764417[chckIndx(i_469764642, 0, (ccourses_469764417).length - 1)], makeNimstrLit("AP"))) {
            gpas_469763752.push((HEX5BHEX5D_469763878(gpaRegular_469763459, cgrades_469764418[chckIndx(i_469764642, 0, (cgrades_469764418).length - 1)]) + HEX5BHEX5D_469763878(gpaWeighted_469763464, makeNimstrLit("AP"))));;
            }
            else {
            if (contains_939525784(ccourses_469764417[chckIndx(i_469764642, 0, (ccourses_469764417).length - 1)], makeNimstrLit("Honors"))) {
            gpas_469763752.push((HEX5BHEX5D_469763878(gpaRegular_469763459, cgrades_469764418[chckIndx(i_469764642, 0, (cgrades_469764418).length - 1)]) + HEX5BHEX5D_469763878(gpaWeighted_469763464, makeNimstrLit("Honors"))));;
            }
            else {
            if (contains_939525784(ccourses_469764417[chckIndx(i_469764642, 0, (ccourses_469764417).length - 1)], makeNimstrLit("(E)"))) {
            gpas_469763752.push((HEX5BHEX5D_469763878(gpaRegular_469763459, cgrades_469764418[chckIndx(i_469764642, 0, (cgrades_469764418).length - 1)]) + HEX5BHEX5D_469763878(gpaWeighted_469763464, makeNimstrLit("Enriched"))));;
            }
            else {
            gpas_469763752.push(HEX5BHEX5D_469763878(gpaRegular_469763459, cgrades_469764418[chckIndx(i_469764642, 0, (cgrades_469764418).length - 1)]));;
            }
            }}
            res_469765604 = addInt(res_469765604, 1);
          }
      } while (false);
    } while (false);
    Label7: do {
      var i_469765072 = 0;
      var colontmp__469765607 = 0;
      colontmp__469765607 = subInt((ccourses_469764417).length, 1);
      var res_469765608 = 0;
      Label8: do {
          Label9: while (true) {
          if (!(res_469765608 <= colontmp__469765607)) break Label9;
            i_469765072 = res_469765608;
            HEX2BHEX3D_939526192(qualityPoints_469764429, 0, (gpas_469763752[chckIndx(i_469765072, 0, (gpas_469763752).length - 1)] * credits_469764427[chckIndx(i_469765072, 0, (credits_469764427).length - 1)]));
            res_469765608 = addInt(res_469765608, 1);
          }
      } while (false);
    } while (false);
    var gpa_469765077 = (qualityPoints_469764429[0] / total_credits_469764428[0]);
    Label10: do {
      var i_469765085 = 0;
      var colontmp__469765611 = 0;
      colontmp__469765611 = subInt((cgrades_469764418).length, 1);
      var res_469765612 = 0;
      Label11: do {
          Label12: while (true) {
          if (!(res_469765612 <= colontmp__469765611)) break Label12;
            i_469765085 = res_469765612;
            unweightedgpas_469764437.push(HEX5BHEX5D_469763878(gpaRegular_469763459, cgrades_469764418[chckIndx(i_469765085, 0, (cgrades_469764418).length - 1)]));;
            res_469765612 = addInt(res_469765612, 1);
          }
      } while (false);
    } while (false);
    Label13: do {
      var i_469765155 = 0;
      var colontmp__469765615 = 0;
      colontmp__469765615 = subInt((cgrades_469764418).length, 1);
      var res_469765616 = 0;
      Label14: do {
          Label15: while (true) {
          if (!(res_469765616 <= colontmp__469765615)) break Label15;
            i_469765155 = res_469765616;
            HEX2BHEX3D_939526192(unweightedQualityPoints_469764439, 0, (unweightedgpas_469764437[chckIndx(i_469765155, 0, (unweightedgpas_469764437).length - 1)] * credits_469764427[chckIndx(i_469765155, 0, (credits_469764427).length - 1)]));
            res_469765616 = addInt(res_469765616, 1);
          }
      } while (false);
    } while (false);
    unweightedgpa_469764438 = (unweightedQualityPoints_469764439[0] / total_credits_469764428[0]);
    var colontmp__469765618 = gpa_469765077;
    var colontmp__469765619 = unweightedgpa_469764438;
    result_469764419 = nimCopy(result_469764419, {Field0: colontmp__469765618, Field1: colontmp__469765619}, NTI469763374);
    break BeforeRet;
  } while (false);

  return result_469764419;

}

function reCalcGpa_469765160(e_469765161) {
  BeforeRet: do {
    if (calculating_469763763) {
    break BeforeRet;
    }
    
    calculating_469763763 = true;
    if (!((document.querySelector("#gpa") == null))) {
    document.querySelector("#gpa").remove();
    }
    
    document.querySelector("p[class='sectionTitle']").appendChild(loadingDOM_469763714);
    var direction_469765165 = cstrToNimstr(e_469765161.target.value);
    var current_469765166 = nsuParseInt(cstrToNimstr(e_469765161.target.id));
    if (eqStrings(direction_469765165, makeNimstrLit("up"))) {
    grades_469763722[chckIndx(current_469765166, 0, (grades_469763722).length - 1)] = nimCopy(null, raiseLetterGrade_469763554(grades_469763722[chckIndx(current_469765166, 0, (grades_469763722).length - 1)]), NTI33554439);
    }
    else {
    if (eqStrings(direction_469765165, makeNimstrLit("down"))) {
    grades_469763722[chckIndx(current_469765166, 0, (grades_469763722).length - 1)] = nimCopy(null, lowerLetterGrade_469763610(grades_469763722[chckIndx(current_469765166, 0, (grades_469763722).length - 1)]), NTI33554439);
    }
    }
    if (use_credits_469763753) {
    var colontmp__469765689 = calculateGpaNumWithCustomCredits_469763771(courses_469763730, grades_469763722, mcredits_469763761);
    var gpa_469765167 = colontmp__469765689["Field0"];
    var unweightedgpa_469765168 = colontmp__469765689["Field1"];
    displayGpa_469763765(gpa_469765167, unweightedgpa_469765168);
    }
    else {
      var colontmp__469765690 = calculateGpaNum_469764416(courses_469763730, grades_469763722);
      var gpa_469765169 = colontmp__469765690["Field0"];
      var unweightedgpa_469765170 = colontmp__469765690["Field1"];
      displayGpa_469763765(gpa_469765169, unweightedgpa_469765170);
    }
    
    createTable_469763770();
  } while (false);

  
}

function createTable_469763770() {
    if (!((document.querySelector("div[id='demarestGpaCustomTable']") == null))) {
    document.querySelector("div[id='demarestGpaCustomTable']").remove();
    }
    
    var table_469765193 = document.createElement("div");
    table_469765193.id = "demarestGpaCustomTable";
    table_469765193.setAttribute("style", "display:flex; flex-direction:column; justify-content:center; width:100%");
    Label1: do {
      var i_469765201 = 0;
      var colontmp__469765620 = 0;
      colontmp__469765620 = subInt((courses_469763730).length, 1);
      var res_469765621 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469765621 <= colontmp__469765620)) break Label3;
            i_469765201 = res_469765621;
            var selection_469765202 = document.createElement("div");
            selection_469765202.setAttribute("class", "demarest-gpa-selection");
            var selection1_469765203 = document.createElement("div");
            var selection2_469765204 = document.createElement("div");
            var title_469765205 = document.createElement("p");
            title_469765205.setAttribute("class", "demarest-gpa-table-text");
            title_469765205.innerText = toJSStr(courses_469763730[chckIndx(i_469765201, 0, (courses_469763730).length - 1)]);
            selection2_469765204.appendChild(title_469765205);
            var upButton_469765206 = document.createElement("button");
            upButton_469765206.setAttribute("id", toJSStr(HEX24_335544323(i_469765201)));
            upButton_469765206.setAttribute("class", "demarest-gpa-change-button");
            upButton_469765206.innerText = "+";
            upButton_469765206.value = "up";
            upButton_469765206.onclick = reCalcGpa_469765160;
            selection2_469765204.appendChild(upButton_469765206);
            var gpaState_469765207 = document.createElement("p");
            gpaState_469765207.setAttribute("class", "demarest-gpa-table-text");
            var fmtRes_469765216 = [mnewString(0)];
            formatValue_1107296418(fmtRes_469765216, 0, grades_469763722[chckIndx(i_469765201, 0, (grades_469763722).length - 1)], []);
            fmtRes_469765216[0].push.apply(fmtRes_469765216[0], makeNimstrLit(" | "));;
            formatValue_469765222(fmtRes_469765216, 0, gpas_469763752[chckIndx(i_469765201, 0, (gpas_469763752).length - 1)], []);
            gpaState_469765207.innerText = toJSStr(fmtRes_469765216[0]);
            selection2_469765204.appendChild(gpaState_469765207);
            var downButton_469765273 = document.createElement("button");
            downButton_469765273.setAttribute("id", toJSStr(HEX24_335544323(i_469765201)));
            downButton_469765273.setAttribute("class", "demarest-gpa-change-button");
            downButton_469765273.innerText = "-";
            downButton_469765273.value = "down";
            downButton_469765273.onclick = reCalcGpa_469765160;
            selection2_469765204.appendChild(downButton_469765273);
            selection1_469765203.appendChild(selection2_469765204);
            selection_469765202.appendChild(selection1_469765203);
            table_469765193.appendChild(selection_469765202);
            res_469765621 = addInt(res_469765621, 1);
          }
      } while (false);
    } while (false);
    document.querySelector("td[colspan='2']").appendChild(table_469765193);

  
}

function activateToggle_469763768(e_469763769) {
    if (toggle_469763762) {
    if (!((document.querySelector("table[class='list']") == null))) {
    document.querySelector("table[class='list']").remove();
    }
    
    createTable_469763770();
    toggle_469763762 = false;
    }
    else {
      if (!((document.querySelector("div[id='demarestGpaCustomTable']") == null))) {
      document.querySelector("div[id='demarestGpaCustomTable']").remove();
      }
      
      document.querySelector("td[colspan='2']").appendChild(ogTable_469763764);
      toggle_469763762 = true;
    }
    

  
}

function displayGpa_469763765(gpa_469763766, unweightedgpa_469763767) {
    
function doAnimate_469765286() {
        
function innerHEX60gensym31_469765347() {
          var result_469765348 = null;

          BeforeRet: do {
            var a_469765349 = null;
            a_469765349 = {};
            a_469765349["width"] = "275px";
            a_469765349["opacity"] = "1";
            result_469765348 = a_469765349;
            break BeforeRet;
          } while (false);

          return result_469765348;

        }
        
function innerHEX60gensym40_469765383() {
          var result_469765384 = null;

          BeforeRet: do {
            var a_469765385 = null;
            a_469765385 = {};
            a_469765385["duration"] = 400;
            a_469765385["iterations"] = 1;
            result_469765384 = a_469765385;
            break BeforeRet;
          } while (false);

          return result_469765384;

        }
        
function HEX3Aanonymous_469765404() {
            gpaDiv_469765334.style.opacity = "1";
            gpaDiv_469765334.style.width = "275px";

          
        }

        var gpaDOM_469765287 = document.createElement("div");
        gpaDOM_469765287.setAttribute("id", "gpa");
        gpaDOM_469765287.setAttribute("style", "height: 100px; opacity: 1; width: 200px; display: flex; justify-content: center; align-items: center; margin: auto;");
        var left_469765288 = document.createElement("p");
        left_469765288.setAttribute("class", "gpa");
        left_469765288.setAttribute("style", "color:#ffffff;background-color:#1565c0;text-align:center; width:150px;border-radius:25px 0px 0px 25px;margin:0 auto;margin-top:10px; height:50px; box-shadow: 2px 2px 4px rgba(0, 0, 0, .4); line-height:25px; border-color: rgb(187, 187, 187);border-right-style: solid;");
        var fmtRes_469765293 = [mnewString(0)];
        fmtRes_469765293[0].push.apply(fmtRes_469765293[0], makeNimstrLit("Weighted<br />"));;
        formatValue_469765222(fmtRes_469765293, 0, round_469765294(gpa_469763766, 2), []);
        left_469765288.innerHTML = toJSStr(fmtRes_469765293[0]);
        var right_469765316 = document.createElement("p");
        right_469765316.setAttribute("class", "gpa");
        right_469765316.setAttribute("style", "color:#ffffff;background-color:#1565c0;text-align:center; width:150px;border-radius:0px 25px 25px 0px;margin:0 auto;margin-top:10px; height:50px; box-shadow: 2px 2px 4px rgba(0, 0, 0, .4); line-height:25px; border-color: rgb(187, 187, 187);border-left-style: solid;");
        var fmtRes_469765321 = [mnewString(0)];
        fmtRes_469765321[0].push.apply(fmtRes_469765321[0], makeNimstrLit("Unweighted<br />"));;
        formatValue_469765222(fmtRes_469765321, 0, round_469765294(unweightedgpa_469763767, 2), []);
        right_469765316.innerHTML = toJSStr(fmtRes_469765321[0]);
        gpaDOM_469765287.appendChild(left_469765288);
        gpaDOM_469765287.appendChild(right_469765316);
        if (!((document.querySelector("#loading") == null))) {
        document.querySelector("#loading").remove();
        }
        
        document.querySelector("p[class='sectionTitle']").appendChild(gpaDOM_469765287);
        var gpaDiv_469765334 = document.querySelector("#gpa");
        gpaDiv_469765334.style.opacity = "0.6";
        gpaDiv_469765334.animate([innerHEX60gensym31_469765347()],innerHEX60gensym40_469765383()).onfinish = HEX3Aanonymous_469765404;
        calculating_469763763 = false;
        gpaDiv_469765334.onclick = activateToggle_469763768;

      
    }

  BeforeRet: do {
    if (!(calculating_469763763)) {
    break BeforeRet;
    }
    
    if (isNaN(gpa_469763766)) {
    document.querySelector("#loading").remove();
    break BeforeRet;
    }
    
    var _ = setTimeout(doAnimate_469765286, 1000);
  } while (false);

  
}
    
function initalCalculate_469765453() {
      BeforeRet: do {
        if (calculating_469763763) {
        break BeforeRet;
        }
        
        calculating_469763763 = true;
        if (!((document.querySelector("#gpa") == null))) {
        document.querySelector("#gpa").remove();
        }
        
        document.querySelector("p[class='sectionTitle']").appendChild(loadingDOM_469763714);
        if (use_credits_469763753) {
        var colontmp__469765650 = calculateGpaNumWithCustomCredits_469763771(courses_469763730, grades_469763722, mcredits_469763761);
        var gpa_469765457 = colontmp__469765650["Field0"];
        var unweightedgpa_469765458 = colontmp__469765650["Field1"];
        displayGpa_469763765(gpa_469765457, unweightedgpa_469765458);
        }
        else {
          var colontmp__469765692 = calculateGpaNum_469764416(courses_469763730, grades_469763722);
          var gpa_469765459 = colontmp__469765692["Field0"];
          var unweightedgpa_469765460 = colontmp__469765692["Field1"];
          displayGpa_469763765(gpa_469765459, unweightedgpa_469765460);
        }
        
      } while (false);

      
    }

  BeforeRet: do {
    var loadingDOM_469763714 = document.createElement("div");
    loadingDOM_469763714.setAttribute("id", "loading");
    loadingDOM_469763714.setAttribute("class", "demarest-gpa-loading");
    loadingDOM_469763714.appendChild(document.createElement("div"));
    loadingDOM_469763714.appendChild(document.createElement("div"));
    loadingDOM_469763714.appendChild(document.createElement("div"));
    loadingDOM_469763714.appendChild(document.createElement("div"));
    var grades_469763722 = newSeq_452985301(0);
    var courses_469763730 = newSeq_452985301(0);
    var gpas_469763752 = newSeq_469763735(0);
    var use_credits_469763753 = false;
    var mcredits_469763761 = newSeq_452985301(0);
    var toggle_469763762 = true;
    var calculating_469763763 = false;
    var ogTable_469763764 = null;
    if ((document.querySelector("table[class='list']") == null)) {
    break BeforeRet;
    }
    
    ogTable_469763764 = document.querySelector("table[class='list']").cloneNode(true);
    var grades_and_classes_469765464 = document.querySelector("table[class='list']").rows;
    if ((document.querySelector("p[class='sectionTitle']") == null)) {
    break BeforeRet;
    }
    
    if ((document.querySelector("#loadingStyles") == null)) {
    var styledom_469765471 = document.createElement("style");
    styledom_469765471.id = "loadingStyles";
    styledom_469765471.textContent = ".demarest-gpa-loading { margin: 0 auto; top-margin: 40px; position: relative; width: 80px; height: 100px; z-index: 1; } .demarest-gpa-loading div { position: absolute; top: 33px; width: 13px; height: 13px; border-radius: 50%; background-color: #1565c0; animation-timing-function: cubic-bezier(0, 1, 1, 0); } .demarest-gpa-loading div:nth-child(1) { left: 8px; animation: demarest-gpa-loading1 0.6s infinite; } .demarest-gpa-loading div:nth-child(2) { left: 8px; animation: demarest-gpa-loading2 0.6s infinite; } .demarest-gpa-loading div:nth-child(3) { left: 32px; animation: demarest-gpa-loading2 0.6s infinite; } .demarest-gpa-loading div:nth-child(4) { left: 56px; animation: demarest-gpa-loading3 0.6s infinite; } @keyframes demarest-gpa-loading1 { 0% { transform: scale(0); } 100% { transform: scale(1); } } @keyframes demarest-gpa-loading3 { 0% { transform: scale(1); } 100% { transform: scale(0); } } @keyframes demarest-gpa-loading2 { 0% { transform: translate(0, 0); } 100% { transform: translate(24px, 0); } }\n        .demarest-gpa-selection {\n            display: flex; flex-direction: row; justify-content: space-between; align-items: center; width: 100%; padding: 10px; border-bottom: 1px solid #e0e0e0;\n        }\n        .demarest-gpa-selection div {\n            display: flex; flex-direction: row; width: 100%;\n        }\n        .demarest-gpa-selection div:nth-child(1) {\n            justify-content: space-between; align-items: center;\n        }\n        .demarest-gpa-selection div:nth-child(2) {\n            justify-content: center; align-items: flex-start;\n        }\n        .demarest-gpa-change-button {\n            background-color: #1565c0; width: 30px; border: 1px solid #ffffff; border-radius: 5px; padding: 5px; color: #fff; font-size: 16px; font-weight: 500; cursor: pointer; margin: 10px;\n        }\n        .demarest-gpa-table-text {\n            font-size: 16px; font-weight: 500; color: #000; margin: 10px; width: 80px;\n        }\n    ";
    document.querySelector("p[class='sectionTitle']").appendChild(styledom_469765471);
    }
    
    Label1: do {
      var i_469765480 = 0;
      var colontmp__469765571 = 0;
      colontmp__469765571 = subInt((grades_and_classes_469765464).length, 1);
      var res_469765572 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_469765572 <= colontmp__469765571)) break Label3;
            i_469765480 = res_469765572;
            if ((((grades_and_classes_469765464[chckIndx(i_469765480, 0, (grades_and_classes_469765464).length - 1)].cells).length < 3) || ((Temporary4 = grades_and_classes_469765464[chckIndx(i_469765480, 0, (grades_and_classes_469765464).length - 1)].cells, Temporary4)[chckIndx(2, 0, (Temporary4).length - 1)] == null))) {
            break Label1;
            }
            
            var name_469765487 = [];
            var mgrade_469765488 = "";
            if (((grades_and_classes_469765464[chckIndx(i_469765480, 0, (grades_and_classes_469765464).length - 1)].cells).length == 4)) {
            use_credits_469763753 = true;
            name_469765487 = nimCopy(null, cstrToNimstr((Temporary6 = (Temporary5 = grades_and_classes_469765464[chckIndx(i_469765480, 0, (grades_and_classes_469765464).length - 1)].cells, Temporary5)[chckIndx(1, 0, (Temporary5).length - 1)].children, Temporary6)[chckIndx(1, 0, (Temporary6).length - 1)].innerText), NTI33554439);
            mgrade_469765488 = (Temporary7 = grades_and_classes_469765464[chckIndx(i_469765480, 0, (grades_and_classes_469765464).length - 1)].cells, Temporary7)[chckIndx(2, 0, (Temporary7).length - 1)].innerText;
            var earned_credit_469765492 = cstrToNimstr((Temporary9 = (Temporary8 = grades_and_classes_469765464[chckIndx(i_469765480, 0, (grades_and_classes_469765464).length - 1)].cells, Temporary8)[chckIndx(3, 0, (Temporary8).length - 1)].children, Temporary9)[chckIndx(1, 0, (Temporary9).length - 1)].innerText.replace(new RegExp("[^\\d.]+","g"),""));
            var Temporary10 = nimCopy(null, earned_credit_469765492, NTI33554439);
            mcredits_469763761.push(Temporary10);;
            }
            else {
              name_469765487 = nimCopy(null, cstrToNimstr((Temporary11 = grades_and_classes_469765464[chckIndx(i_469765480, 0, (grades_and_classes_469765464).length - 1)].cells, Temporary11)[chckIndx(0, 0, (Temporary11).length - 1)].innerText), NTI33554439);
              mgrade_469765488 = (Temporary12 = grades_and_classes_469765464[chckIndx(i_469765480, 0, (grades_and_classes_469765464).length - 1)].cells, Temporary12)[chckIndx(2, 0, (Temporary12).length - 1)].innerText;
            }
            
            var grade_469765497 = cstrToNimstr(mgrade_469765488.replace("*PROJECTED","").replace(new RegExp("[^A-F+-]","g"),""));
            if ((ifValid_469763504(name_469765487, grade_469765497) || (use_credits_469763753 && contains_973078571(gradeLetters_469762078, grade_469765497)))) {
            var Temporary13 = nimCopy(null, grade_469765497, NTI33554439);
            grades_469763722.push(Temporary13);;
            var Temporary14 = nimCopy(null, name_469765487, NTI33554439);
            courses_469763730.push(Temporary14);;
            }
            
            res_469765572 = addInt(res_469765572, 1);
          }
      } while (false);
    } while (false);
    if ((((courses_469763730).length == 0) || ((grades_469763722).length == 0))) {
    break BeforeRet;
    }
    
    if ((document.querySelector("#loading") == null)) {
    initalCalculate_469765453();
    }
    
  } while (false);

  
}
if (true) {
main_469763712();
}

